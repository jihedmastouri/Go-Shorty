// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: rules.sql

package db

import (
	"context"
	"database/sql"
)

const createRuleGroup = `-- name: CreateRuleGroup :one

INSERT INTO block_rules (name, nested, descr, has_likes, has_comments, comments_max_nest,
        comments_has_likes, comment_editable)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING name
`

type CreateRuleGroupParams struct {
	Name             string
	Nested           sql.NullBool
	Descr            string
	HasLikes         sql.NullBool
	HasComments      sql.NullBool
	CommentsMaxNest  sql.NullInt16
	CommentsHasLikes sql.NullBool
	CommentEditable  sql.NullBool
}

// ----------------
// 2- Adding
// ----------------
func (q *Queries) CreateRuleGroup(ctx context.Context, arg CreateRuleGroupParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createRuleGroup,
		arg.Name,
		arg.Nested,
		arg.Descr,
		arg.HasLikes,
		arg.HasComments,
		arg.CommentsMaxNest,
		arg.CommentsHasLikes,
		arg.CommentEditable,
	)
	var name string
	err := row.Scan(&name)
	return name, err
}

const deleteRuleGroup = `-- name: DeleteRuleGroup :exec
DELETE FROM block_rules WHERE name = $1
`

func (q *Queries) DeleteRuleGroup(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteRuleGroup, name)
	return err
}

const deleteRuleGroupById = `-- name: DeleteRuleGroupById :exec

DELETE FROM block_rules WHERE id = $1
`

// ----------------
// 6- Deletions
// ----------------
func (q *Queries) DeleteRuleGroupById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRuleGroupById, id)
	return err
}

const getAllRuleGroups = `-- name: GetAllRuleGroups :many
SELECT name, descr
FROM block_rules
LIMIT 100
`

type GetAllRuleGroupsRow struct {
	Name  string
	Descr string
}

func (q *Queries) GetAllRuleGroups(ctx context.Context) ([]GetAllRuleGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllRuleGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllRuleGroupsRow
	for rows.Next() {
		var i GetAllRuleGroupsRow
		if err := rows.Scan(&i.Name, &i.Descr); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRuleGroupByName = `-- name: GetRuleGroupByName :one


SELECT nested, has_comments, has_likes,
    comments_max_nest, comments_has_likes, comment_editable
FROM block_rules
WHERE name = $1
`

type GetRuleGroupByNameRow struct {
	Nested           sql.NullBool
	HasComments      sql.NullBool
	HasLikes         sql.NullBool
	CommentsMaxNest  sql.NullInt16
	CommentsHasLikes sql.NullBool
	CommentEditable  sql.NullBool
}

//	 ____                  _
//	/ __ \__  _____  _____(_)__  _____
//
// / / / / / / / _ \/ ___/ / _ \/ ___/
// / /_/ / /_/ /  __/ /  / /  __(__  )
// \___\_\__,_/\___/_/  /_/\___/____/
// ------------------------------------------
// This File Contains all Queries on the Main Database.
// Refer to Sqlc for more information https://docs.sqlc.dev/en/stable/
//
// The File Includes 6 Section:
//
// 1- `Selections` following: Get? / Get?By?
// 2- `Adding` Inserts following Create?
// 3- `Joins` insert for ManyToMany, following Add?To?
// 4- `Updates` following: Update?
// 5- `Deletions` following: Delete?
// 6- `Counts` following: Count?
//
// Please use PascalCase for naming.
// ----------------
// 1- Selections
// ----------------
func (q *Queries) GetRuleGroupByName(ctx context.Context, name string) (GetRuleGroupByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getRuleGroupByName, name)
	var i GetRuleGroupByNameRow
	err := row.Scan(
		&i.Nested,
		&i.HasComments,
		&i.HasLikes,
		&i.CommentsMaxNest,
		&i.CommentsHasLikes,
		&i.CommentEditable,
	)
	return i, err
}

const updateRuleGroup = `-- name: UpdateRuleGroup :exec


Update block_rules
    SET nested = $2,
        has_likes = $3,
        has_comments = $4,
        comments_max_nest = $5,
        comments_has_likes = $6,
        comment_editable = $7,
        descr = $8
WHERE name = $1
`

type UpdateRuleGroupParams struct {
	Name             string
	Nested           sql.NullBool
	HasLikes         sql.NullBool
	HasComments      sql.NullBool
	CommentsMaxNest  sql.NullInt16
	CommentsHasLikes sql.NullBool
	CommentEditable  sql.NullBool
	Descr            string
}

// ----------------
// 3- Joins
// ----------------
// ----------------
// 5- Updates
// ----------------
func (q *Queries) UpdateRuleGroup(ctx context.Context, arg UpdateRuleGroupParams) error {
	_, err := q.db.ExecContext(ctx, updateRuleGroup,
		arg.Name,
		arg.Nested,
		arg.HasLikes,
		arg.HasComments,
		arg.CommentsMaxNest,
		arg.CommentsHasLikes,
		arg.CommentEditable,
		arg.Descr,
	)
	return err
}
