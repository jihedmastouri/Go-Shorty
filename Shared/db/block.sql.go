// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: block.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addBlock = `-- name: AddBlock :one

INSERT INTO blocks (author, name, nested, has_likes, has_comments, comments_max_nest,
        comments_has_likes, comment_editable, rules_name, type)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id
`

type AddBlockParams struct {
	Author           uuid.UUID
	Name             string
	Nested           bool
	HasLikes         bool
	HasComments      bool
	CommentsMaxNest  int16
	CommentsHasLikes bool
	CommentEditable  bool
	RulesName        sql.NullString
	Type             int32
}

// ----------------
// 2- Adding
// ----------------
func (q *Queries) AddBlock(ctx context.Context, arg AddBlockParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, addBlock,
		arg.Author,
		arg.Name,
		arg.Nested,
		arg.HasLikes,
		arg.HasComments,
		arg.CommentsMaxNest,
		arg.CommentsHasLikes,
		arg.CommentEditable,
		arg.RulesName,
		arg.Type,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteBlock = `-- name: DeleteBlock :exec

DELETE FROM blocks WHERE id = $1
`

// ----------------
// 6- Deletions
// ----------------
func (q *Queries) DeleteBlock(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBlock, id)
	return err
}

const deleteBlockImages = `-- name: DeleteBlockImages :exec
DELETE FROM block_images
WHERE block_lang_id = (
        SELECT id
        FROM  block_langs
        WHERE block_id = $1 AND lang_name = $2
    )
`

type DeleteBlockImagesParams struct {
	BlockID  uuid.UUID
	LangName string
}

func (q *Queries) DeleteBlockImages(ctx context.Context, arg DeleteBlockImagesParams) error {
	_, err := q.db.ExecContext(ctx, deleteBlockImages, arg.BlockID, arg.LangName)
	return err
}

const deleteBlockLang = `-- name: DeleteBlockLang :exec
DELETE FROM block_langs
WHERE block_id = $1 AND lang_name = $2
`

type DeleteBlockLangParams struct {
	BlockID  uuid.UUID
	LangName string
}

func (q *Queries) DeleteBlockLang(ctx context.Context, arg DeleteBlockLangParams) error {
	_, err := q.db.ExecContext(ctx, deleteBlockLang, arg.BlockID, arg.LangName)
	return err
}

const deleteBlockRichText = `-- name: DeleteBlockRichText :exec
DELETE FROM block_rich_texts
WHERE block_lang_id = (
        SELECT id
        FROM  block_langs
        WHERE block_id = $1 AND lang_name = $2
    )
`

type DeleteBlockRichTextParams struct {
	BlockID  uuid.UUID
	LangName string
}

func (q *Queries) DeleteBlockRichText(ctx context.Context, arg DeleteBlockRichTextParams) error {
	_, err := q.db.ExecContext(ctx, deleteBlockRichText, arg.BlockID, arg.LangName)
	return err
}

const deleteBlockText = `-- name: DeleteBlockText :exec
DELETE FROM block_texts
WHERE block_lang_id = (
        SELECT id
        FROM  block_langs
        WHERE block_id = $1 AND lang_name = $2
    )
`

type DeleteBlockTextParams struct {
	BlockID  uuid.UUID
	LangName string
}

func (q *Queries) DeleteBlockText(ctx context.Context, arg DeleteBlockTextParams) error {
	_, err := q.db.ExecContext(ctx, deleteBlockText, arg.BlockID, arg.LangName)
	return err
}

const getBlock = `-- name: GetBlock :many


SELECT id, author, created_at, name
FROM blocks
LIMIT $1
OFFSET $2
`

type GetBlockParams struct {
	Limit  int32
	Offset int32
}

type GetBlockRow struct {
	ID        uuid.UUID
	Author    uuid.UUID
	CreatedAt sql.NullTime
	Name      string
}

//	 ____                  _
//	/ __ \__  _____  _____(_)__  _____
//
// / / / / / / / _ \/ ___/ / _ \/ ___/
// / /_/ / /_/ /  __/ /  / /  __(__  )
// \___\_\__,_/\___/_/  /_/\___/____/
// ------------------------------------------
// This File Contains all Queries on the Main Database.
// Refer to Sqlc for more information https://docs.sqlc.dev/en/stable/
//
// The File Includes 6 Section:
//
// 1- `Selections` following: Get? / Get?By?
// 2- `Adding` Inserts following Create?
// 3- `Joins` insert for ManyToMany, following Add?To?
// 4- `Updates` following: Update?
// 5- `Deletions` following: Delete?
// 6- `Counts` following: Count?
//
// Please use PascalCase for naming.
// ----------------
// 1- Selections
// ----------------
func (q *Queries) GetBlock(ctx context.Context, arg GetBlockParams) ([]GetBlockRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlock, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlockRow
	for rows.Next() {
		var i GetBlockRow
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.CreatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlockByID = `-- name: GetBlockByID :one
SELECT id, author, created_at, name
FROM blocks b
WHERE b.id = $1
`

type GetBlockByIDRow struct {
	ID        uuid.UUID
	Author    uuid.UUID
	CreatedAt sql.NullTime
	Name      string
}

func (q *Queries) GetBlockByID(ctx context.Context, id uuid.UUID) (GetBlockByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getBlockByID, id)
	var i GetBlockByIDRow
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}

const getBlockImages = `-- name: GetBlockImages :many
select bi.title, bi.alt, bi.file
from block_images bi
inner join block_langs bl
on block_lang.id = bi.block_lang_id
where bl.lang_code = $1 and  bl.block_id = $2
`

type GetBlockImagesParams struct {
	LangCode string
	BlockID  uuid.UUID
}

type GetBlockImagesRow struct {
	Title string
	Alt   sql.NullString
	File  string
}

func (q *Queries) GetBlockImages(ctx context.Context, arg GetBlockImagesParams) ([]GetBlockImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlockImages, arg.LangCode, arg.BlockID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlockImagesRow
	for rows.Next() {
		var i GetBlockImagesRow
		if err := rows.Scan(&i.Title, &i.Alt, &i.File); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlockRichText = `-- name: GetBlockRichText :many
select brt.name, brt.hint, brt.content
from block_rich_texts brt
inner join block_langs bl
on bl.id = brt.block_lang_id
where bl.lang_code = $1 and  bl.block_id = $2
`

type GetBlockRichTextParams struct {
	LangCode string
	BlockID  uuid.UUID
}

type GetBlockRichTextRow struct {
	Name    string
	Hint    sql.NullString
	Content string
}

func (q *Queries) GetBlockRichText(ctx context.Context, arg GetBlockRichTextParams) ([]GetBlockRichTextRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlockRichText, arg.LangCode, arg.BlockID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlockRichTextRow
	for rows.Next() {
		var i GetBlockRichTextRow
		if err := rows.Scan(&i.Name, &i.Hint, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlockText = `-- name: GetBlockText :many
select bt.content, bt.hint, bt.name
from block_texts bt
inner join block_langs bl
on bl.id = bt.block_lang_id
where bl.lang_code = $1 and  bl.block_id = $2
`

type GetBlockTextParams struct {
	LangCode string
	BlockID  uuid.UUID
}

type GetBlockTextRow struct {
	Content string
	Hint    sql.NullString
	Name    string
}

func (q *Queries) GetBlockText(ctx context.Context, arg GetBlockTextParams) ([]GetBlockTextRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlockText, arg.LangCode, arg.BlockID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlockTextRow
	for rows.Next() {
		var i GetBlockTextRow
		if err := rows.Scan(&i.Content, &i.Hint, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTypeByName = `-- name: GetTypeByName :one
SELECT id
FROM block_types bt
WHERE bt.name = $1
`

func (q *Queries) GetTypeByName(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getTypeByName, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const joinChildToBlock = `-- name: JoinChildToBlock :exec

INSERT INTO block_nested (
    child, parent
) VALUES ($1,$2)
`

type JoinChildToBlockParams struct {
	Child  uuid.NullUUID
	Parent uuid.NullUUID
}

// ----------------
// 3- Joins
// ----------------
func (q *Queries) JoinChildToBlock(ctx context.Context, arg JoinChildToBlockParams) error {
	_, err := q.db.ExecContext(ctx, joinChildToBlock, arg.Child, arg.Parent)
	return err
}

const updateBlock = `-- name: UpdateBlock :exec

Update blocks
    SET rules_name = $2,
        nested = $3,
        has_likes = $4,
        has_comments = $5,
        comments_max_nest = $6,
        comments_has_likes = $7,
        comment_editable = $8,
        name = $9
WHERE id = $1
`

type UpdateBlockParams struct {
	ID               uuid.UUID
	RulesName        sql.NullString
	Nested           bool
	HasLikes         bool
	HasComments      bool
	CommentsMaxNest  int16
	CommentsHasLikes bool
	CommentEditable  bool
	Name             string
}

// ----------------
// 5- Updates
// ----------------
func (q *Queries) UpdateBlock(ctx context.Context, arg UpdateBlockParams) error {
	_, err := q.db.ExecContext(ctx, updateBlock,
		arg.ID,
		arg.RulesName,
		arg.Nested,
		arg.HasLikes,
		arg.HasComments,
		arg.CommentsMaxNest,
		arg.CommentsHasLikes,
		arg.CommentEditable,
		arg.Name,
	)
	return err
}
