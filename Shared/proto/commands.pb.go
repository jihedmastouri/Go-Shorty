// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.6
// source: commands.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *string     `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name      string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BlockType string      `protobuf:"bytes,3,opt,name=block_type,json=blockType,proto3" json:"block_type,omitempty"`
	Rules     *BlockRules `protobuf:"bytes,4,opt,name=rules,proto3,oneof" json:"rules,omitempty"`
	Author    string      `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commands_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRequest) GetBlockType() string {
	if x != nil {
		return x.BlockType
	}
	return ""
}

func (x *CreateRequest) GetRules() *BlockRules {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *CreateRequest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

type CreateLangRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LangName     string  `protobuf:"bytes,2,opt,name=lang_name,json=langName,proto3" json:"lang_name,omitempty"`
	LangCode     string  `protobuf:"bytes,3,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	BlockId      string  `protobuf:"bytes,4,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Author       string  `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	PreviousLang *string `protobuf:"bytes,6,opt,name=previousLang,proto3,oneof" json:"previousLang,omitempty"`
}

func (x *CreateLangRequest) Reset() {
	*x = CreateLangRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLangRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLangRequest) ProtoMessage() {}

func (x *CreateLangRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commands_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLangRequest.ProtoReflect.Descriptor instead.
func (*CreateLangRequest) Descriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{1}
}

func (x *CreateLangRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateLangRequest) GetLangName() string {
	if x != nil {
		return x.LangName
	}
	return ""
}

func (x *CreateLangRequest) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *CreateLangRequest) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *CreateLangRequest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *CreateLangRequest) GetPreviousLang() string {
	if x != nil && x.PreviousLang != nil {
		return *x.PreviousLang
	}
	return ""
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Author string `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commands_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteRequest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

type DeleteLangRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LangCode string `protobuf:"bytes,2,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Author   string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *DeleteLangRequest) Reset() {
	*x = DeleteLangRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLangRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLangRequest) ProtoMessage() {}

func (x *DeleteLangRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commands_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLangRequest.ProtoReflect.Descriptor instead.
func (*DeleteLangRequest) Descriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteLangRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteLangRequest) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *DeleteLangRequest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

type CreateTaxonomy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Descr  string `protobuf:"bytes,2,opt,name=descr,proto3" json:"descr,omitempty"`
	Author string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *CreateTaxonomy) Reset() {
	*x = CreateTaxonomy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaxonomy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaxonomy) ProtoMessage() {}

func (x *CreateTaxonomy) ProtoReflect() protoreflect.Message {
	mi := &file_commands_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaxonomy.ProtoReflect.Descriptor instead.
func (*CreateTaxonomy) Descriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTaxonomy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTaxonomy) GetDescr() string {
	if x != nil {
		return x.Descr
	}
	return ""
}

func (x *CreateTaxonomy) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

type DeleteTaxonomy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Author string `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *DeleteTaxonomy) Reset() {
	*x = DeleteTaxonomy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTaxonomy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaxonomy) ProtoMessage() {}

func (x *DeleteTaxonomy) ProtoReflect() protoreflect.Message {
	mi := &file_commands_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaxonomy.ProtoReflect.Descriptor instead.
func (*DeleteTaxonomy) Descriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteTaxonomy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteTaxonomy) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

type ActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuceess bool   `protobuf:"varint,1,opt,name=isSuceess,proto3" json:"isSuceess,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ActionResponse) Reset() {
	*x = ActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commands_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResponse) ProtoMessage() {}

func (x *ActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commands_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResponse.ProtoReflect.Descriptor instead.
func (*ActionResponse) Descriptor() ([]byte, []int) {
	return file_commands_proto_rawDescGZIP(), []int{6}
}

func (x *ActionResponse) GetIsSuceess() bool {
	if x != nil {
		return x.IsSuceess
	}
	return false
}

func (x *ActionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_commands_proto protoreflect.FileDescriptor

var file_commands_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x48, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4c, 0x61, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4c, 0x61,
	0x6e, 0x67, 0x22, 0x37, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x58, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x52, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3c, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x58, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53,
	0x75, 0x63, 0x65, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x53, 0x75, 0x63, 0x65, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x8b, 0x06, 0x0a, 0x08, 0x46, 0x6c, 0x69, 0x70, 0x46, 0x6c, 0x6f, 0x70, 0x12, 0x3c,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x6e,
	0x67, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3b, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commands_proto_rawDescOnce sync.Once
	file_commands_proto_rawDescData = file_commands_proto_rawDesc
)

func file_commands_proto_rawDescGZIP() []byte {
	file_commands_proto_rawDescOnce.Do(func() {
		file_commands_proto_rawDescData = protoimpl.X.CompressGZIP(file_commands_proto_rawDescData)
	})
	return file_commands_proto_rawDescData
}

var file_commands_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_commands_proto_goTypes = []interface{}{
	(*CreateRequest)(nil),     // 0: proto.CreateRequest
	(*CreateLangRequest)(nil), // 1: proto.CreateLangRequest
	(*DeleteRequest)(nil),     // 2: proto.DeleteRequest
	(*DeleteLangRequest)(nil), // 3: proto.DeleteLangRequest
	(*CreateTaxonomy)(nil),    // 4: proto.CreateTaxonomy
	(*DeleteTaxonomy)(nil),    // 5: proto.DeleteTaxonomy
	(*ActionResponse)(nil),    // 6: proto.ActionResponse
	(*BlockRules)(nil),        // 7: proto.BlockRules
}
var file_commands_proto_depIdxs = []int32{
	7,  // 0: proto.CreateRequest.rules:type_name -> proto.BlockRules
	0,  // 1: proto.FlipFlop.CreateBlock:input_type -> proto.CreateRequest
	0,  // 2: proto.FlipFlop.UpdateBlock:input_type -> proto.CreateRequest
	2,  // 3: proto.FlipFlop.DeleteBlock:input_type -> proto.DeleteRequest
	1,  // 4: proto.FlipFlop.CreateBlockLang:input_type -> proto.CreateLangRequest
	3,  // 5: proto.FlipFlop.DeleteBlockLang:input_type -> proto.DeleteLangRequest
	7,  // 6: proto.FlipFlop.CreateBlockRule:input_type -> proto.BlockRules
	7,  // 7: proto.FlipFlop.UpdateBlockRule:input_type -> proto.BlockRules
	7,  // 8: proto.FlipFlop.DeleteBlockRule:input_type -> proto.BlockRules
	4,  // 9: proto.FlipFlop.CreateTag:input_type -> proto.CreateTaxonomy
	5,  // 10: proto.FlipFlop.DeleteTag:input_type -> proto.DeleteTaxonomy
	4,  // 11: proto.FlipFlop.CreateCategory:input_type -> proto.CreateTaxonomy
	5,  // 12: proto.FlipFlop.DeleteCategory:input_type -> proto.DeleteTaxonomy
	6,  // 13: proto.FlipFlop.CreateBlock:output_type -> proto.ActionResponse
	6,  // 14: proto.FlipFlop.UpdateBlock:output_type -> proto.ActionResponse
	6,  // 15: proto.FlipFlop.DeleteBlock:output_type -> proto.ActionResponse
	6,  // 16: proto.FlipFlop.CreateBlockLang:output_type -> proto.ActionResponse
	6,  // 17: proto.FlipFlop.DeleteBlockLang:output_type -> proto.ActionResponse
	6,  // 18: proto.FlipFlop.CreateBlockRule:output_type -> proto.ActionResponse
	6,  // 19: proto.FlipFlop.UpdateBlockRule:output_type -> proto.ActionResponse
	6,  // 20: proto.FlipFlop.DeleteBlockRule:output_type -> proto.ActionResponse
	6,  // 21: proto.FlipFlop.CreateTag:output_type -> proto.ActionResponse
	6,  // 22: proto.FlipFlop.DeleteTag:output_type -> proto.ActionResponse
	6,  // 23: proto.FlipFlop.CreateCategory:output_type -> proto.ActionResponse
	6,  // 24: proto.FlipFlop.DeleteCategory:output_type -> proto.ActionResponse
	13, // [13:25] is the sub-list for method output_type
	1,  // [1:13] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_commands_proto_init() }
func file_commands_proto_init() {
	if File_commands_proto != nil {
		return
	}
	file_block_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_commands_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commands_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLangRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commands_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commands_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLangRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commands_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaxonomy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commands_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTaxonomy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commands_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_commands_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_commands_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commands_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commands_proto_goTypes,
		DependencyIndexes: file_commands_proto_depIdxs,
		MessageInfos:      file_commands_proto_msgTypes,
	}.Build()
	File_commands_proto = out.File
	file_commands_proto_rawDesc = nil
	file_commands_proto_goTypes = nil
	file_commands_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FlipFlopClient is the client API for FlipFlop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlipFlopClient interface {
	// Block
	CreateBlock(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	UpdateBlock(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	DeleteBlock(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	CreateBlockLang(ctx context.Context, in *CreateLangRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	DeleteBlockLang(ctx context.Context, in *DeleteLangRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Rules
	CreateBlockRule(ctx context.Context, in *BlockRules, opts ...grpc.CallOption) (*ActionResponse, error)
	UpdateBlockRule(ctx context.Context, in *BlockRules, opts ...grpc.CallOption) (*ActionResponse, error)
	DeleteBlockRule(ctx context.Context, in *BlockRules, opts ...grpc.CallOption) (*ActionResponse, error)
	// Taxonomy:
	CreateTag(ctx context.Context, in *CreateTaxonomy, opts ...grpc.CallOption) (*ActionResponse, error)
	DeleteTag(ctx context.Context, in *DeleteTaxonomy, opts ...grpc.CallOption) (*ActionResponse, error)
	CreateCategory(ctx context.Context, in *CreateTaxonomy, opts ...grpc.CallOption) (*ActionResponse, error)
	DeleteCategory(ctx context.Context, in *DeleteTaxonomy, opts ...grpc.CallOption) (*ActionResponse, error)
}

type flipFlopClient struct {
	cc grpc.ClientConnInterface
}

func NewFlipFlopClient(cc grpc.ClientConnInterface) FlipFlopClient {
	return &flipFlopClient{cc}
}

func (c *flipFlopClient) CreateBlock(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/proto.FlipFlop/CreateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flipFlopClient) UpdateBlock(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/proto.FlipFlop/UpdateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flipFlopClient) DeleteBlock(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/proto.FlipFlop/DeleteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flipFlopClient) CreateBlockLang(ctx context.Context, in *CreateLangRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/proto.FlipFlop/CreateBlockLang", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flipFlopClient) DeleteBlockLang(ctx context.Context, in *DeleteLangRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/proto.FlipFlop/DeleteBlockLang", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flipFlopClient) CreateBlockRule(ctx context.Context, in *BlockRules, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/proto.FlipFlop/CreateBlockRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flipFlopClient) UpdateBlockRule(ctx context.Context, in *BlockRules, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/proto.FlipFlop/UpdateBlockRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flipFlopClient) DeleteBlockRule(ctx context.Context, in *BlockRules, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/proto.FlipFlop/DeleteBlockRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flipFlopClient) CreateTag(ctx context.Context, in *CreateTaxonomy, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/proto.FlipFlop/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flipFlopClient) DeleteTag(ctx context.Context, in *DeleteTaxonomy, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/proto.FlipFlop/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flipFlopClient) CreateCategory(ctx context.Context, in *CreateTaxonomy, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/proto.FlipFlop/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flipFlopClient) DeleteCategory(ctx context.Context, in *DeleteTaxonomy, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/proto.FlipFlop/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlipFlopServer is the server API for FlipFlop service.
type FlipFlopServer interface {
	// Block
	CreateBlock(context.Context, *CreateRequest) (*ActionResponse, error)
	UpdateBlock(context.Context, *CreateRequest) (*ActionResponse, error)
	DeleteBlock(context.Context, *DeleteRequest) (*ActionResponse, error)
	CreateBlockLang(context.Context, *CreateLangRequest) (*ActionResponse, error)
	DeleteBlockLang(context.Context, *DeleteLangRequest) (*ActionResponse, error)
	// Rules
	CreateBlockRule(context.Context, *BlockRules) (*ActionResponse, error)
	UpdateBlockRule(context.Context, *BlockRules) (*ActionResponse, error)
	DeleteBlockRule(context.Context, *BlockRules) (*ActionResponse, error)
	// Taxonomy:
	CreateTag(context.Context, *CreateTaxonomy) (*ActionResponse, error)
	DeleteTag(context.Context, *DeleteTaxonomy) (*ActionResponse, error)
	CreateCategory(context.Context, *CreateTaxonomy) (*ActionResponse, error)
	DeleteCategory(context.Context, *DeleteTaxonomy) (*ActionResponse, error)
}

// UnimplementedFlipFlopServer can be embedded to have forward compatible implementations.
type UnimplementedFlipFlopServer struct {
}

func (*UnimplementedFlipFlopServer) CreateBlock(context.Context, *CreateRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlock not implemented")
}
func (*UnimplementedFlipFlopServer) UpdateBlock(context.Context, *CreateRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlock not implemented")
}
func (*UnimplementedFlipFlopServer) DeleteBlock(context.Context, *DeleteRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlock not implemented")
}
func (*UnimplementedFlipFlopServer) CreateBlockLang(context.Context, *CreateLangRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlockLang not implemented")
}
func (*UnimplementedFlipFlopServer) DeleteBlockLang(context.Context, *DeleteLangRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlockLang not implemented")
}
func (*UnimplementedFlipFlopServer) CreateBlockRule(context.Context, *BlockRules) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlockRule not implemented")
}
func (*UnimplementedFlipFlopServer) UpdateBlockRule(context.Context, *BlockRules) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlockRule not implemented")
}
func (*UnimplementedFlipFlopServer) DeleteBlockRule(context.Context, *BlockRules) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlockRule not implemented")
}
func (*UnimplementedFlipFlopServer) CreateTag(context.Context, *CreateTaxonomy) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (*UnimplementedFlipFlopServer) DeleteTag(context.Context, *DeleteTaxonomy) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (*UnimplementedFlipFlopServer) CreateCategory(context.Context, *CreateTaxonomy) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (*UnimplementedFlipFlopServer) DeleteCategory(context.Context, *DeleteTaxonomy) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}

func RegisterFlipFlopServer(s *grpc.Server, srv FlipFlopServer) {
	s.RegisterService(&_FlipFlop_serviceDesc, srv)
}

func _FlipFlop_CreateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlipFlopServer).CreateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FlipFlop/CreateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlipFlopServer).CreateBlock(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlipFlop_UpdateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlipFlopServer).UpdateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FlipFlop/UpdateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlipFlopServer).UpdateBlock(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlipFlop_DeleteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlipFlopServer).DeleteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FlipFlop/DeleteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlipFlopServer).DeleteBlock(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlipFlop_CreateBlockLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlipFlopServer).CreateBlockLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FlipFlop/CreateBlockLang",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlipFlopServer).CreateBlockLang(ctx, req.(*CreateLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlipFlop_DeleteBlockLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlipFlopServer).DeleteBlockLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FlipFlop/DeleteBlockLang",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlipFlopServer).DeleteBlockLang(ctx, req.(*DeleteLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlipFlop_CreateBlockRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlipFlopServer).CreateBlockRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FlipFlop/CreateBlockRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlipFlopServer).CreateBlockRule(ctx, req.(*BlockRules))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlipFlop_UpdateBlockRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlipFlopServer).UpdateBlockRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FlipFlop/UpdateBlockRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlipFlopServer).UpdateBlockRule(ctx, req.(*BlockRules))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlipFlop_DeleteBlockRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlipFlopServer).DeleteBlockRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FlipFlop/DeleteBlockRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlipFlopServer).DeleteBlockRule(ctx, req.(*BlockRules))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlipFlop_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaxonomy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlipFlopServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FlipFlop/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlipFlopServer).CreateTag(ctx, req.(*CreateTaxonomy))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlipFlop_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaxonomy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlipFlopServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FlipFlop/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlipFlopServer).DeleteTag(ctx, req.(*DeleteTaxonomy))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlipFlop_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaxonomy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlipFlopServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FlipFlop/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlipFlopServer).CreateCategory(ctx, req.(*CreateTaxonomy))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlipFlop_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaxonomy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlipFlopServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FlipFlop/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlipFlopServer).DeleteCategory(ctx, req.(*DeleteTaxonomy))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlipFlop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FlipFlop",
	HandlerType: (*FlipFlopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlock",
			Handler:    _FlipFlop_CreateBlock_Handler,
		},
		{
			MethodName: "UpdateBlock",
			Handler:    _FlipFlop_UpdateBlock_Handler,
		},
		{
			MethodName: "DeleteBlock",
			Handler:    _FlipFlop_DeleteBlock_Handler,
		},
		{
			MethodName: "CreateBlockLang",
			Handler:    _FlipFlop_CreateBlockLang_Handler,
		},
		{
			MethodName: "DeleteBlockLang",
			Handler:    _FlipFlop_DeleteBlockLang_Handler,
		},
		{
			MethodName: "CreateBlockRule",
			Handler:    _FlipFlop_CreateBlockRule_Handler,
		},
		{
			MethodName: "UpdateBlockRule",
			Handler:    _FlipFlop_UpdateBlockRule_Handler,
		},
		{
			MethodName: "DeleteBlockRule",
			Handler:    _FlipFlop_DeleteBlockRule_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _FlipFlop_CreateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _FlipFlop_DeleteTag_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _FlipFlop_CreateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _FlipFlop_DeleteCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commands.proto",
}
