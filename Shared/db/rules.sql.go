// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: rules.sql

package db

import (
	"context"
	"database/sql"
)

const addBlockRule = `-- name: AddBlockRule :one

INSERT INTO block_rules (name, nested, has_likes, has_comments, comments_max_nest,
        comments_has_likes, comment_editable)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING name
`

type AddBlockRuleParams struct {
	Name             string
	Nested           sql.NullBool
	HasLikes         sql.NullBool
	HasComments      sql.NullBool
	CommentsMaxNest  sql.NullInt16
	CommentsHasLikes sql.NullBool
	CommentEditable  sql.NullBool
}

// ----------------
// 2- Adding
// ----------------
func (q *Queries) AddBlockRule(ctx context.Context, arg AddBlockRuleParams) (string, error) {
	row := q.db.QueryRowContext(ctx, addBlockRule,
		arg.Name,
		arg.Nested,
		arg.HasLikes,
		arg.HasComments,
		arg.CommentsMaxNest,
		arg.CommentsHasLikes,
		arg.CommentEditable,
	)
	var name string
	err := row.Scan(&name)
	return name, err
}

const deleteBlockRules = `-- name: DeleteBlockRules :exec

DELETE FROM block_rules WHERE id = $1
`

// ----------------
// 6- Deletions
// ----------------
func (q *Queries) DeleteBlockRules(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBlockRules, id)
	return err
}

const getAllBlockRules = `-- name: GetAllBlockRules :many
SELECT name, descr
FROM block_rules
LIMIT 100
`

type GetAllBlockRulesRow struct {
	Name  string
	Descr string
}

func (q *Queries) GetAllBlockRules(ctx context.Context) ([]GetAllBlockRulesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllBlockRules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBlockRulesRow
	for rows.Next() {
		var i GetAllBlockRulesRow
		if err := rows.Scan(&i.Name, &i.Descr); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlockRulesByName = `-- name: GetBlockRulesByName :one


SELECT nested, has_comments, has_likes,
    comments_max_nest, comments_has_likes, comment_editable
FROM block_rules
WHERE name = $1
`

type GetBlockRulesByNameRow struct {
	Nested           sql.NullBool
	HasComments      sql.NullBool
	HasLikes         sql.NullBool
	CommentsMaxNest  sql.NullInt16
	CommentsHasLikes sql.NullBool
	CommentEditable  sql.NullBool
}

//	 ____                  _
//	/ __ \__  _____  _____(_)__  _____
//
// / / / / / / / _ \/ ___/ / _ \/ ___/
// / /_/ / /_/ /  __/ /  / /  __(__  )
// \___\_\__,_/\___/_/  /_/\___/____/
// ------------------------------------------
// This File Contains all Queries on the Main Database.
// Refer to Sqlc for more information https://docs.sqlc.dev/en/stable/
//
// The File Includes 6 Section:
//
// 1- `Selections` following: Get? / Get?By?
// 2- `Adding` Inserts following Create?
// 3- `Joins` insert for ManyToMany, following Add?To?
// 4- `Updates` following: Update?
// 5- `Deletions` following: Delete?
// 6- `Counts` following: Count?
//
// Please use PascalCase for naming.
// ----------------
// 1- Selections
// ----------------
func (q *Queries) GetBlockRulesByName(ctx context.Context, name string) (GetBlockRulesByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getBlockRulesByName, name)
	var i GetBlockRulesByNameRow
	err := row.Scan(
		&i.Nested,
		&i.HasComments,
		&i.HasLikes,
		&i.CommentsMaxNest,
		&i.CommentsHasLikes,
		&i.CommentEditable,
	)
	return i, err
}

const updateBlockRules = `-- name: UpdateBlockRules :exec


Update block_rules
    SET name = $2,
        nested = $3,
        has_likes = $4,
        has_comments = $5,
        comments_max_nest = $6,
        comments_has_likes = $7,
        comment_editable = $8
WHERE id = $1
`

type UpdateBlockRulesParams struct {
	ID               int32
	Name             string
	Nested           sql.NullBool
	HasLikes         sql.NullBool
	HasComments      sql.NullBool
	CommentsMaxNest  sql.NullInt16
	CommentsHasLikes sql.NullBool
	CommentEditable  sql.NullBool
}

// ----------------
// 3- Joins
// ----------------
// ----------------
// 5- Updates
// ----------------
func (q *Queries) UpdateBlockRules(ctx context.Context, arg UpdateBlockRulesParams) error {
	_, err := q.db.ExecContext(ctx, updateBlockRules,
		arg.ID,
		arg.Name,
		arg.Nested,
		arg.HasLikes,
		arg.HasComments,
		arg.CommentsMaxNest,
		arg.CommentsHasLikes,
		arg.CommentEditable,
	)
	return err
}
