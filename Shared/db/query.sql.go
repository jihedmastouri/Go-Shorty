// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addBlock = `-- name: AddBlock :exec

INSERT INTO blocks (
    has_likes, has_comments, block_type, comments_type
) VALUES ($1,$2,$3,$4)
`

type AddBlockParams struct {
	HasLikes     sql.NullBool
	HasComments  sql.NullBool
	BlockType    uuid.NullUUID
	CommentsType uuid.NullUUID
}

// ----------------
// 2- Adding
// ----------------
func (q *Queries) AddBlock(ctx context.Context, arg AddBlockParams) error {
	_, err := q.db.ExecContext(ctx, addBlock,
		arg.HasLikes,
		arg.HasComments,
		arg.BlockType,
		arg.CommentsType,
	)
	return err
}

const addCateg = `-- name: AddCateg :exec
INSERT INTO Tags (
    name, descr
) VALUES ($1,$2)
`

type AddCategParams struct {
	Name  string
	Descr sql.NullString
}

func (q *Queries) AddCateg(ctx context.Context, arg AddCategParams) error {
	_, err := q.db.ExecContext(ctx, addCateg, arg.Name, arg.Descr)
	return err
}

const addCommentRules = `-- name: AddCommentRules :exec
INSERT INTO comment_types(
    name, nested, has_likes, editable, max_nest
) VALUES ($1,$2,$3,$4,$5) RETURNING id
`

type AddCommentRulesParams struct {
	Name     sql.NullString
	Nested   sql.NullBool
	HasLikes sql.NullBool
	Editable sql.NullBool
	MaxNest  sql.NullInt16
}

func (q *Queries) AddCommentRules(ctx context.Context, arg AddCommentRulesParams) error {
	_, err := q.db.ExecContext(ctx, addCommentRules,
		arg.Name,
		arg.Nested,
		arg.HasLikes,
		arg.Editable,
		arg.MaxNest,
	)
	return err
}

const addTag = `-- name: AddTag :exec
INSERT INTO Tags (
    name, descr
) VALUES ($1,$2)
`

type AddTagParams struct {
	Name  string
	Descr sql.NullString
}

func (q *Queries) AddTag(ctx context.Context, arg AddTagParams) error {
	_, err := q.db.ExecContext(ctx, addTag, arg.Name, arg.Descr)
	return err
}

const deleteBlock = `-- name: DeleteBlock :exec

DELETE FROM blocks
    WHERE id = $1
    RETURNING id
`

// ----------------
// 5- Deletions
// ----------------
func (q *Queries) DeleteBlock(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBlock, id)
	return err
}

const deleteBlockLang = `-- name: DeleteBlockLang :exec
DELETE FROM block_langs
    WHERE block_id = $1
    AND lang_name = $2
    RETURNING id
`

type DeleteBlockLangParams struct {
	BlockID  uuid.UUID
	LangName string
}

func (q *Queries) DeleteBlockLang(ctx context.Context, arg DeleteBlockLangParams) error {
	_, err := q.db.ExecContext(ctx, deleteBlockLang, arg.BlockID, arg.LangName)
	return err
}

const getBlock = `-- name: GetBlock :many


select id, author, created_at, updated_at from blocks
`

type GetBlockRow struct {
	ID        uuid.UUID
	Author    uuid.UUID
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

//	 ____                  _
//	/ __ \__  _____  _____(_)__  _____
//
// / / / / / / / _ \/ ___/ / _ \/ ___/
// / /_/ / /_/ /  __/ /  / /  __(__  )
// \___\_\__,_/\___/_/  /_/\___/____/
// ------------------------------------------
// This File Contains all Queries on the Main Database.
// Refer to Sqlc for more information https://docs.sqlc.dev/en/stable/
//
// The File Includes 5 Section:
//
// 1- `Selections`following: Get? / Get?By?
// 2- `Adding` Inserts following Create?
// 3- `Joins` insert for ManyToMany, following Add?To?
// 4- `Updates` following: Update?
// 5- `Deletions` following: Delete?
//
// Please use PascalCase for naming.
// ----------------
// 1- Selections
// ----------------
func (q *Queries) GetBlock(ctx context.Context) ([]GetBlockRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlock)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlockRow
	for rows.Next() {
		var i GetBlockRow
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlockByID = `-- name: GetBlockByID :one
select b.version_number
from blocks b
where b.id = $1
`

func (q *Queries) GetBlockByID(ctx context.Context, id uuid.UUID) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getBlockByID, id)
	var version_number interface{}
	err := row.Scan(&version_number)
	return version_number, err
}

const getBlockCategories = `-- name: GetBlockCategories :many
SELECT name, descr
  FROM categories c
  INNER JOIN block_categ bc
  ON c.id = bc.categ_id
  INNER JOIN blocks
  ON bc.block_id = block.id
`

type GetBlockCategoriesRow struct {
	Name  string
	Descr sql.NullString
}

func (q *Queries) GetBlockCategories(ctx context.Context) ([]GetBlockCategoriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlockCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlockCategoriesRow
	for rows.Next() {
		var i GetBlockCategoriesRow
		if err := rows.Scan(&i.Name, &i.Descr); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlockImages = `-- name: GetBlockImages :many
select bi.title, bi.alt, bi.file
from block_images bi
inner join block_langs bl
on block_lang.id = bi.block_lang_id
where bl.lang_code = $1 and  bl.block_id = $2
`

type GetBlockImagesParams struct {
	LangCode string
	BlockID  uuid.UUID
}

type GetBlockImagesRow struct {
	Title string
	Alt   sql.NullString
	File  string
}

func (q *Queries) GetBlockImages(ctx context.Context, arg GetBlockImagesParams) ([]GetBlockImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlockImages, arg.LangCode, arg.BlockID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlockImagesRow
	for rows.Next() {
		var i GetBlockImagesRow
		if err := rows.Scan(&i.Title, &i.Alt, &i.File); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlockRichText = `-- name: GetBlockRichText :many
select brt.name, brt.hint, brt.content
from block_rich_texts brt
inner join block_langs bl
on bl.id = brt.block_lang_id
where bl.lang_code = $1 and  bl.block_id = $2
`

type GetBlockRichTextParams struct {
	LangCode string
	BlockID  uuid.UUID
}

type GetBlockRichTextRow struct {
	Name    string
	Hint    sql.NullString
	Content string
}

func (q *Queries) GetBlockRichText(ctx context.Context, arg GetBlockRichTextParams) ([]GetBlockRichTextRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlockRichText, arg.LangCode, arg.BlockID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlockRichTextRow
	for rows.Next() {
		var i GetBlockRichTextRow
		if err := rows.Scan(&i.Name, &i.Hint, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlockTags = `-- name: GetBlockTags :many
SELECT name, descr
  FROM categories c
  INNER JOIN block_tags bt
  ON c.id = bt.tag_id
  INNER JOIN blocks
  ON bt.block_id = block.id
`

type GetBlockTagsRow struct {
	Name  string
	Descr sql.NullString
}

func (q *Queries) GetBlockTags(ctx context.Context) ([]GetBlockTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlockTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlockTagsRow
	for rows.Next() {
		var i GetBlockTagsRow
		if err := rows.Scan(&i.Name, &i.Descr); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlockText = `-- name: GetBlockText :many
select bt.content, bt.hint, bt.name
from block_texts bt
inner join block_langs bl
on bl.id = bt.block_lang_id
where bl.lang_code = $1 and  bl.block_id = $2
`

type GetBlockTextParams struct {
	LangCode string
	BlockID  uuid.UUID
}

type GetBlockTextRow struct {
	Content string
	Hint    sql.NullString
	Name    string
}

func (q *Queries) GetBlockText(ctx context.Context, arg GetBlockTextParams) ([]GetBlockTextRow, error) {
	rows, err := q.db.QueryContext(ctx, getBlockText, arg.LangCode, arg.BlockID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBlockTextRow
	for rows.Next() {
		var i GetBlockTextRow
		if err := rows.Scan(&i.Content, &i.Hint, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const joinCategToBlock = `-- name: JoinCategToBlock :exec
INSERT INTO block_categ(
    block_id, categ_id
) VALUES ($1,$2)
`

type JoinCategToBlockParams struct {
	BlockID uuid.NullUUID
	CategID uuid.NullUUID
}

func (q *Queries) JoinCategToBlock(ctx context.Context, arg JoinCategToBlockParams) error {
	_, err := q.db.ExecContext(ctx, joinCategToBlock, arg.BlockID, arg.CategID)
	return err
}

const joinTagToBlock = `-- name: JoinTagToBlock :exec

INSERT INTO block_tags(
    block_id, tag_id
) VALUES ($1,$2)
`

type JoinTagToBlockParams struct {
	BlockID uuid.NullUUID
	TagID   uuid.NullUUID
}

// ----------------
// 3- Joins
// ----------------
func (q *Queries) JoinTagToBlock(ctx context.Context, arg JoinTagToBlockParams) error {
	_, err := q.db.ExecContext(ctx, joinTagToBlock, arg.BlockID, arg.TagID)
	return err
}

const updateBlockCommentsType = `-- name: UpdateBlockCommentsType :exec

Update blocks SET comments_type = (
    select id
    from comment_types
    where name = $1
)
`

// ----------------
// 5- Updates
// ----------------
func (q *Queries) UpdateBlockCommentsType(ctx context.Context, name sql.NullString) error {
	_, err := q.db.ExecContext(ctx, updateBlockCommentsType, name)
	return err
}
